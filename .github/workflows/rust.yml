name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        path: 'shader'

    - uses: actions/checkout@v3
      with:
        repository: 'EmbarkStudios/rust-gpu'
        path: 'rust-gpu'

    - name: Install dependencies
      run: sudo apt install libxkbcommon-dev

    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          rust-gpu/target
          rust-gpu/target/debug
          rust-gpu/target/release
          shader/target
          shader/target/debug
          shader/target/release
          shader/target/doc
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build rust-gpu
      run: |
        cd rust-gpu
        cargo build --release --verbose

    - name: Emplace .cargo/config.toml
      run: |
        cd shader
        mkdir .cargo
        echo "[build]" >> .cargo/config.toml
        echo "target = \"spirv-unknown-spv1.5\"" >> .cargo/config.toml
        echo "rustflags = [" >> .cargo/config.toml
        echo "  \"-Zcodegen-backend=${{ github.workspace }}/rust-gpu/target/release/librustc_codegen_spirv.so\"," >> .cargo/config.toml
        echo "  \"-Zbinary-dep-depinfo\"," >> .cargo/config.toml
        echo "  \"-Csymbol-mangling-version=v0\"," >> .cargo/config.toml
        echo "  \"-Zcrate-attr=feature(register_tool)\"," >> .cargo/config.toml
        echo "  \"-Zcrate-attr=register_tool(rust_gpu)\"" >> .cargo/config.toml
        echo "]" >> .cargo/config.toml
        echo "" >> .cargo/config.toml
        echo "[unstable]" >> .cargo/config.toml
        echo "build-std=[\"core\"]" >> .cargo/config.toml
        echo "build-std-features=[\"compiler-builtins-mem\"]" >> .cargo/config.toml
        echo "config.toml:"
        cat .cargo/config.toml

    - name: Build shader
      run: |
        cd shader
        cargo build --verbose

    - name: Run tests
      run: |
        cd shader
        cargo test --verbose

